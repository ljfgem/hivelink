/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.transform.Memoized

plugins {
  id 'nebula.dependency-recommender' version '9.0.2'
  id "com.diffplug.spotless" version "5.8.2"
}

if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
  project.ext.jdkVersion = '8'
} else if (JavaVersion.current() == JavaVersion.VERSION_11) {
  project.ext.jdkVersion = '11'
} else {
  throw new GradleException("This build must be run with JDK 8 or 11")
}

dependencyRecommendations {
  propertiesFile file: file('versions.props')
}

spotless {
  groovyGradle {
    target '**/*.gradle'
    endWithNewline()
    greclipse().configFile("${rootDir}/gradle/spotless/codestyle-eclipse.xml")
  }
  format 'markdown', {
    target '**/*.md'
    targetExclude 'docs/release-notes.md'
    endWithNewline()
  }
}

allprojects {
  group = "com.linkedin.hivelink"
  version = getProjectVersion()
  apply plugin: "com.diffplug.spotless"

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
  }
}

subprojects {
  apply plugin: 'nebula.dependency-recommender'
  apply plugin: 'java'

  configurations {
    testCompile.extendsFrom compileOnly
    testArtifacts
  }

  dependencies {
    testCompile 'junit:junit'
    testCompile 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  }

  spotless {
    java {
      importOrder('java', 'javax', 'com', 'org', 'com.linkedin.hivelink', '\\#')
      removeUnusedImports()
      eclipse().configFile("${rootDir}/gradle/spotless/codestyle-eclipse.xml")
      licenseHeaderFile file("${rootDir}/gradle/license/LICENSE_HEADER")
    }
  }
}

@Memoized
boolean isVersionFileExists() {
  return file('version.txt').exists()
}

@Memoized
String getVersionFromFile() {
  return file('version.txt').text.trim()
}

String getProjectVersion() {
  if (isVersionFileExists()) {
    return getVersionFromFile()
  }

  try {
    return gitVersion()
  } catch (NullPointerException e) {
    throw new Exception("Neither version.txt nor git version exists")
  }
}

apply from: 'deploy.gradle'
